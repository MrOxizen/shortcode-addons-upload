var sa = {
    isAdminBar: function () {
        return $('body').is('.admin-bar');
    },

    init: function () {



        var globals = {
            'sticky': sa.Sticky,
            'parallax': sa.ParallaxElement,
            'global-tooltip': sa.GlobalTooltip,
        };

        var sections = {
            'parallax-background': sa.ParallaxBackground,
        };
        $.each(globals, function (extension, callback) {
            elementorFrontend.hooks.addAction('frontend/element_ready/global', callback);
        });

        $.each(sections, function (extension, callback) {
            elementorFrontend.hooks.addAction('frontend/element_ready/section', callback);
        });
    },

    getRefreshableWidgets: function () {
        if (!sa_el_addons_loader)
            return false;

        return sa_el_addons_loader.refreshableWidgets;
    },
    getGlobalSettings: function (section) {

        if (section in elementorFrontendConfig.settings) {
            return elementorFrontendConfig.settings[section];
        }

        return false;
    },

    getItems: function (items, itemKey) {
        if (itemKey) {
            var keyStack = itemKey.split('.'),
                    currentKey = keyStack.splice(0, 1);

            if (!keyStack.length) {
                return items[ currentKey ];
            }

            if (!items[ currentKey ]) {
                return;
            }

            return this.getItems(items[ currentKey ], keyStack.join('.'));
        }

        return items;
    },

    getElementSettings: function ($element, setting) {

        var elementSettings = {},
                modelCID = $element.data('model-cid');

        if (elementorFrontend.isEditMode() && modelCID) {
            var settings = elementorFrontend.config.elements.data[ modelCID ],
                    type = settings.attributes.widgetType || settings.attributes.elType,
                    settingsKeys = elementorFrontend.config.elements.keys[ type ];

            if (!settingsKeys) {
                settingsKeys = elementorFrontend.config.elements.keys[type] = [];

                jQuery.each(settings.controls, function (name, control) {
                    if (control.frontend_available) {
                        settingsKeys.push(name);
                    }
                });
            }

            jQuery.each(settings.getActiveControls(), function (controlKey) {
                if (-1 !== settingsKeys.indexOf(controlKey)) {
                    elementSettings[ controlKey ] = settings.attributes[ controlKey ];
                }
            });
        } else {
            elementSettings = $element.data('settings') || {};
        }

        return sa.getItems(elementSettings, setting);
    },

    getElementType: function ($element) {
        if ('section' === $element.data('element_type') || 'column' === $element.data('element_type')) {
            return $element.data('element_type');
        }

        return 'widget';
    },

    getElementSkin: function ($element) {
        return $element.attr('data-widget_type').split('.')[1];
    },

    getUniqueScopeId: function ($scope) {
        var scopeId = $scope.data('id'),
                $clones = $('[data-id="' + scopeId + '"]');

        if (!sa.hasMultipleScopeId(scopeId)) {
            return scopeId;
        }

        $clones.each(function (index) {
            $(this).attr('data-offcanvas-index', index);
        });

        scopeId = scopeId + '_' + $scope.data('offcanvas-index');

        return scopeId;
    },

    refreshWidgets: function ($container, refreshable) {
        $container.each(function () {
            $(this).find('.elementor-widget').each(function () {
                sa.refreshWidget($(this), refreshable);
            });
        });
    },

    refreshWidget: function ($widget, refreshable) {
        var widgetType = $widget.data('widget_type');

        if (refreshable) {
            $.each(sa.getRefreshableWidgets(), function (index, widget) {
                if (widget === widgetType) {
                    elementorFrontend.elementsHandler.runReadyTrigger($widget);
                }
            });
        } else {
            elementorFrontend.elementsHandler.runReadyTrigger($widget);
        }
    },

    hasMultipleScopeId: function (scopeId) {
        var $clones = $('[data-id="' + scopeId + '"]');

        if (1 === $clones.length) {
            return false;
        }

        return true;
    },

    getWindow: function () {
        return elementorFrontend.isEditMode() ? window.elementor.$previewContents : $(window);
    },

    onElementRemove: function ($element, callback) {
        if (elementorFrontend.isEditMode()) {
            elementor.channels.data.on('element:before:remove', function (model) {
                if ($element.data('id') === model.id) {
                    callback();
                }
            });
        }
    }
};

var SADevices = function ($) {
    var $wrapper = $('.sa-el-device-wrapper'),
            $device = $wrapper.find('.sa-el-device'),
            $shape = $wrapper.find('.sa-el-device__shape'),
            url = null,
            device_type = null,
            svg = null;
    SADevices.init = function () {
        if (!$wrapper.find('.sa-el-device__shape').data('device-shape')) {
            device_type = 'phone';
        } else {
            device_type = $scope.find('.sa-el-device__shape').data('device-shape');
        }
        url = shortcode_addons_data.saupload + 'Devices/Shape/' + device_type + '.svg';
        //  url = sa_el_addons_loader.urls.assets + 'shapes/' + SADevices.elementSettings.device_type + '.svg';
        CONSOLE.LOG(url);

        jQuery.get(url, function (data) {
            $shape.html(data.childNodes[0]);

            svg = $shape.find("svg.devices-elementor-svg").get(0);

        });
        if ('yes' === SADevices.elementSettings.device_orientation_control) {
            $scope.find('.sa-el-device__orientation').on('click', function () {
                $scope.toggleClass('sa-el-device-orientation-landscape');
            });
        }
        SAVideoPlayer($scope);
    };

    SADevices.init();
};

SADevices();




var SAVideoPlayer = function ($scope, $) {
    $scope.elementSettings = sa.getElementSettings($scope);

    var $video = $scope.find('.sa-el-video-player'),
            videoPlayerArgs = {
                playOnViewport: 'yes' === $scope.elementSettings.video_play_viewport,
                stopOffViewport: 'yes' === $scope.elementSettings.video_stop_viewport,
                endAtLastFrame: 'yes' === $scope.elementSettings.video_end_at_last_frame,
                restartOnPause: 'yes' === $scope.elementSettings.video_restart_on_pause,
                stopOthersOnPlay: 'yes' === $scope.elementSettings.video_stop_others,
            };

    if ('undefined' !== typeof $scope.elementSettings.video_speed) {
        videoPlayerArgs.speed = $scope.elementSettings.video_speed.size;
    }

    if (!$video.length)
        return;

    $scope.init = function () {
        if ('undefined' !== typeof $scope.elementSettings.video_volume) {
            videoPlayerArgs.volume = $scope.elementSettings.video_volume.size;
        }

        $video.SAVideoPlayer(videoPlayerArgs);
    };

    $scope.init();
};


